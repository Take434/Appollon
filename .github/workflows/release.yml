name: Release
on: 
  release:
    types: [published]
  workflow_dispatch:

    ## Build Job ##
    ## only run build job when triggered by release ##

jobs:
  build:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'release' }}

    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      REPOSITORY: take434/appollon

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Create Container
        run: docker build -t $REPOSITORY:latest .

      #####################################
      # Push to Github Container Registry #
      #####################################
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag Docker image for Github registry (current version)
        run: docker tag $REPOSITORY:latest $REGISTRY/$REPOSITORY:$VERSION
        env:
          OWNER: ${{ github.repository_owner }}
          VERSION: ${{ github.event.release.tag_name }}

      - name: Push Docker image to Github registry (current version)
        run: docker push $REGISTRY/$REPOSITORY:$VERSION
        env:
          OWNER: ${{ github.repository_owner }}
          VERSION: ${{ github.event.release.tag_name }}

      - name: Tag Docker image for Github registry (latest)
        run: docker tag $REPOSITORY:latest $REGISTRY/$REPOSITORY:$VERSION
        env:
          OWNER: ${{ github.repository_owner }}
          VERSION: latest

      - name: Push Docker image to Github registry (latest)
        run: docker push $REGISTRY/$REPOSITORY:$VERSION
        env:
          OWNER: ${{ github.repository_owner }}
          VERSION: latest

## end of Build Job ##
## always run deploy-to-azure job, even when triggered manually ##

  deploy-to-azure: 
    needs: 
      - build

    runs-on: ubuntu-latest

    if: ${{ always() }}

    permissions:
      contents: read
      id-token: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      # - name: 'Deploy to Azure Container Instances'
      #   uses: 'azure/aci-deploy@v1'
      #   with:
      #     resource-group: apollon
      #     dns-name-label: apollon${{ github.run_number }}
      #     image: ghcr.io/take434/appollon:latest
      #     registry-login-server: ghcr.io
      #     registry-username: ${{ github.actor }}
      #     registry-password: ${{ secrets.GITHUB_TOKEN }}
      #     name: appollon
      #     location: 'germanywestcentral'
      #     environment-variables: 
            
            #"SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }} SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }} SPOTIFY_REDIRECT_URI=${{ secrets.SPOTIFY_REDIRECT_URI }} DATABASE_URL=${{ secrets.DATABASE_URL }} SPOTIFY_SCOPE=${{ secrets.SPOTIFY_SCOPE }}"


      - name: Run Azure CLI script to create ACI
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Check if the container with the specified name already exists
            if az container show --resource-group apollon --name appollon &> /dev/null; then
                # Update the existing container with the new image
                az container restart
            else
                # Create a new container with the specified image
                az container create --resource-group apollon --name appollon --registry-login-server ghcr.io --registry-username ${{ github.actor }} --registry-password ${{ secrets.GITHUB_TOKEN }} --image ghcr.io/take434/appollon:latest --cpu 1 --memory 1.5 --ports 3000 --dns-name-label apollon${{ github.run_number }} --location germanywestcentral --environment-variables SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }} SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }} SPOTIFY_REDIRECT_URI=${{ secrets.SPOTIFY_REDIRECT_URI }} DATABASE_URL=${{ secrets.DATABASE_URL }} SPOTIFY_SCOPE=${{ secrets.SPOTIFY_SCOPE }}
            fi
